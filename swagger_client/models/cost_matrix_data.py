# coding: utf-8

"""
    GraphHopper Directions API

    You use the GraphHopper Directions API to add route planning, navigation and route optimization to your software. E.g. the Routing API has turn instructions and elevation data and the Route Optimization API solves your logistic problems and supports various constraints like time window and capacity restrictions. Also it is possible to get all distances between all locations with our fast Matrix API.

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class CostMatrixData(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, times=None, distances=None, info=None):
        """
        CostMatrixData - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'times': 'list[list[int]]',
            'distances': 'list[list[float]]',
            'info': 'CostMatrixDataInfo'
        }

        self.attribute_map = {
            'times': 'times',
            'distances': 'distances',
            'info': 'info'
        }

        self._times = times
        self._distances = distances
        self._info = info

    @property
    def times(self):
        """
        Gets the times of this CostMatrixData.

        :return: The times of this CostMatrixData.
        :rtype: list[list[int]]
        """
        return self._times

    @times.setter
    def times(self, times):
        """
        Sets the times of this CostMatrixData.

        :param times: The times of this CostMatrixData.
        :type: list[list[int]]
        """

        self._times = times

    @property
    def distances(self):
        """
        Gets the distances of this CostMatrixData.

        :return: The distances of this CostMatrixData.
        :rtype: list[list[float]]
        """
        return self._distances

    @distances.setter
    def distances(self, distances):
        """
        Sets the distances of this CostMatrixData.

        :param distances: The distances of this CostMatrixData.
        :type: list[list[float]]
        """

        self._distances = distances

    @property
    def info(self):
        """
        Gets the info of this CostMatrixData.

        :return: The info of this CostMatrixData.
        :rtype: CostMatrixDataInfo
        """
        return self._info

    @info.setter
    def info(self, info):
        """
        Sets the info of this CostMatrixData.

        :param info: The info of this CostMatrixData.
        :type: CostMatrixDataInfo
        """

        self._info = info

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, CostMatrixData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

# coding: utf-8

"""
    GraphHopper Directions API

    You use the GraphHopper Directions API to add route planning, navigation and route optimization to your software. E.g. the Routing API has turn instructions and elevation data and the Route Optimization API solves your logistic problems and supports various constraints like time window and capacity restrictions. Also it is possible to get all distances between all locations with our fast Matrix API.

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class VehicleType(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, type_id=None, profile=None, capacity=None, speed_factor=None, service_time_factor=None, cost_per_meter=None, cost_per_second=None, cost_per_activation=None):
        """
        VehicleType - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'type_id': 'str',
            'profile': 'str',
            'capacity': 'list[int]',
            'speed_factor': 'float',
            'service_time_factor': 'float',
            'cost_per_meter': 'float',
            'cost_per_second': 'float',
            'cost_per_activation': 'float'
        }

        self.attribute_map = {
            'type_id': 'type_id',
            'profile': 'profile',
            'capacity': 'capacity',
            'speed_factor': 'speed_factor',
            'service_time_factor': 'service_time_factor',
            'cost_per_meter': 'cost_per_meter',
            'cost_per_second': 'cost_per_second',
            'cost_per_activation': 'cost_per_activation'
        }

        self._type_id = type_id
        self._profile = profile
        self._capacity = capacity
        self._speed_factor = speed_factor
        self._service_time_factor = service_time_factor
        self._cost_per_meter = cost_per_meter
        self._cost_per_second = cost_per_second
        self._cost_per_activation = cost_per_activation

    @property
    def type_id(self):
        """
        Gets the type_id of this VehicleType.
        Unique identifier for the vehicle type

        :return: The type_id of this VehicleType.
        :rtype: str
        """
        return self._type_id

    @type_id.setter
    def type_id(self, type_id):
        """
        Sets the type_id of this VehicleType.
        Unique identifier for the vehicle type

        :param type_id: The type_id of this VehicleType.
        :type: str
        """

        self._type_id = type_id

    @property
    def profile(self):
        """
        Gets the profile of this VehicleType.
        Profile of vehicle type

        :return: The profile of this VehicleType.
        :rtype: str
        """
        return self._profile

    @profile.setter
    def profile(self, profile):
        """
        Sets the profile of this VehicleType.
        Profile of vehicle type

        :param profile: The profile of this VehicleType.
        :type: str
        """
        allowed_values = ["car", "bike", "foot", "mtb", "racingbike", "truck", "small_truck"]
        if profile not in allowed_values:
            raise ValueError(
                "Invalid value for `profile` ({0}), must be one of {1}"
                .format(profile, allowed_values)
            )

        self._profile = profile

    @property
    def capacity(self):
        """
        Gets the capacity of this VehicleType.
        array of capacity dimensions

        :return: The capacity of this VehicleType.
        :rtype: list[int]
        """
        return self._capacity

    @capacity.setter
    def capacity(self, capacity):
        """
        Sets the capacity of this VehicleType.
        array of capacity dimensions

        :param capacity: The capacity of this VehicleType.
        :type: list[int]
        """

        self._capacity = capacity

    @property
    def speed_factor(self):
        """
        Gets the speed_factor of this VehicleType.
        speed_factor of vehicle type

        :return: The speed_factor of this VehicleType.
        :rtype: float
        """
        return self._speed_factor

    @speed_factor.setter
    def speed_factor(self, speed_factor):
        """
        Sets the speed_factor of this VehicleType.
        speed_factor of vehicle type

        :param speed_factor: The speed_factor of this VehicleType.
        :type: float
        """

        self._speed_factor = speed_factor

    @property
    def service_time_factor(self):
        """
        Gets the service_time_factor of this VehicleType.
        service time factor of vehicle type

        :return: The service_time_factor of this VehicleType.
        :rtype: float
        """
        return self._service_time_factor

    @service_time_factor.setter
    def service_time_factor(self, service_time_factor):
        """
        Sets the service_time_factor of this VehicleType.
        service time factor of vehicle type

        :param service_time_factor: The service_time_factor of this VehicleType.
        :type: float
        """

        self._service_time_factor = service_time_factor

    @property
    def cost_per_meter(self):
        """
        Gets the cost_per_meter of this VehicleType.
        cost parameter per distance unit, here meter is used

        :return: The cost_per_meter of this VehicleType.
        :rtype: float
        """
        return self._cost_per_meter

    @cost_per_meter.setter
    def cost_per_meter(self, cost_per_meter):
        """
        Sets the cost_per_meter of this VehicleType.
        cost parameter per distance unit, here meter is used

        :param cost_per_meter: The cost_per_meter of this VehicleType.
        :type: float
        """

        self._cost_per_meter = cost_per_meter

    @property
    def cost_per_second(self):
        """
        Gets the cost_per_second of this VehicleType.
        cost parameter per time unit, here second is used

        :return: The cost_per_second of this VehicleType.
        :rtype: float
        """
        return self._cost_per_second

    @cost_per_second.setter
    def cost_per_second(self, cost_per_second):
        """
        Sets the cost_per_second of this VehicleType.
        cost parameter per time unit, here second is used

        :param cost_per_second: The cost_per_second of this VehicleType.
        :type: float
        """

        self._cost_per_second = cost_per_second

    @property
    def cost_per_activation(self):
        """
        Gets the cost_per_activation of this VehicleType.
        cost parameter vehicle activation, i.e. fixed costs per vehicle

        :return: The cost_per_activation of this VehicleType.
        :rtype: float
        """
        return self._cost_per_activation

    @cost_per_activation.setter
    def cost_per_activation(self, cost_per_activation):
        """
        Sets the cost_per_activation of this VehicleType.
        cost parameter vehicle activation, i.e. fixed costs per vehicle

        :param cost_per_activation: The cost_per_activation of this VehicleType.
        :type: float
        """

        self._cost_per_activation = cost_per_activation

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, VehicleType):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

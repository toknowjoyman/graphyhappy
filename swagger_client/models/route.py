# coding: utf-8

"""
    GraphHopper Directions API

    You use the GraphHopper Directions API to add route planning, navigation and route optimization to your software. E.g. the Routing API has turn instructions and elevation data and the Route Optimization API solves your logistic problems and supports various constraints like time window and capacity restrictions. Also it is possible to get all distances between all locations with our fast Matrix API.

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class Route(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, vehicle_id=None, distance=None, transport_time=None, completion_time=None, waiting_time=None, activities=None, points=None):
        """
        Route - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'vehicle_id': 'str',
            'distance': 'int',
            'transport_time': 'int',
            'completion_time': 'int',
            'waiting_time': 'int',
            'activities': 'list[Activity]',
            'points': 'list[RoutePoint]'
        }

        self.attribute_map = {
            'vehicle_id': 'vehicle_id',
            'distance': 'distance',
            'transport_time': 'transport_time',
            'completion_time': 'completion_time',
            'waiting_time': 'waiting_time',
            'activities': 'activities',
            'points': 'points'
        }

        self._vehicle_id = vehicle_id
        self._distance = distance
        self._transport_time = transport_time
        self._completion_time = completion_time
        self._waiting_time = waiting_time
        self._activities = activities
        self._points = points

    @property
    def vehicle_id(self):
        """
        Gets the vehicle_id of this Route.
        id of vehicle that operates route

        :return: The vehicle_id of this Route.
        :rtype: str
        """
        return self._vehicle_id

    @vehicle_id.setter
    def vehicle_id(self, vehicle_id):
        """
        Sets the vehicle_id of this Route.
        id of vehicle that operates route

        :param vehicle_id: The vehicle_id of this Route.
        :type: str
        """

        self._vehicle_id = vehicle_id

    @property
    def distance(self):
        """
        Gets the distance of this Route.
        distance of route in meter

        :return: The distance of this Route.
        :rtype: int
        """
        return self._distance

    @distance.setter
    def distance(self, distance):
        """
        Sets the distance of this Route.
        distance of route in meter

        :param distance: The distance of this Route.
        :type: int
        """

        self._distance = distance

    @property
    def transport_time(self):
        """
        Gets the transport_time of this Route.
        transport time of route in ms

        :return: The transport_time of this Route.
        :rtype: int
        """
        return self._transport_time

    @transport_time.setter
    def transport_time(self, transport_time):
        """
        Sets the transport_time of this Route.
        transport time of route in ms

        :param transport_time: The transport_time of this Route.
        :type: int
        """

        self._transport_time = transport_time

    @property
    def completion_time(self):
        """
        Gets the completion_time of this Route.
        completion time of route in ms

        :return: The completion_time of this Route.
        :rtype: int
        """
        return self._completion_time

    @completion_time.setter
    def completion_time(self, completion_time):
        """
        Sets the completion_time of this Route.
        completion time of route in ms

        :param completion_time: The completion_time of this Route.
        :type: int
        """

        self._completion_time = completion_time

    @property
    def waiting_time(self):
        """
        Gets the waiting_time of this Route.
        waiting time of route in ms

        :return: The waiting_time of this Route.
        :rtype: int
        """
        return self._waiting_time

    @waiting_time.setter
    def waiting_time(self, waiting_time):
        """
        Sets the waiting_time of this Route.
        waiting time of route in ms

        :param waiting_time: The waiting_time of this Route.
        :type: int
        """

        self._waiting_time = waiting_time

    @property
    def activities(self):
        """
        Gets the activities of this Route.
        array of activities

        :return: The activities of this Route.
        :rtype: list[Activity]
        """
        return self._activities

    @activities.setter
    def activities(self, activities):
        """
        Sets the activities of this Route.
        array of activities

        :param activities: The activities of this Route.
        :type: list[Activity]
        """

        self._activities = activities

    @property
    def points(self):
        """
        Gets the points of this Route.
        array of route planning points

        :return: The points of this Route.
        :rtype: list[RoutePoint]
        """
        return self._points

    @points.setter
    def points(self, points):
        """
        Sets the points of this Route.
        array of route planning points

        :param points: The points of this Route.
        :type: list[RoutePoint]
        """

        self._points = points

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, Route):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
